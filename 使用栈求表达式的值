#include <bits/stdc++.h>
using namespace std;
struct part{//把一个表达式拆分成一个个独立的模块，每个模块要么是一个浮点数，要么是一个运算符。
    double figure;
    char cha;
    bool type;
    part(bool ty,double fig,char ch)//true number,false operator
    {
        type=ty;
        figure=fig;
        cha=ch;
    }
};
int getInStackPriority(char c)//栈内运算符优先级
{
    switch(c)
    {
    case '#':
        return 0;
    case '(':
        return 1;
    case '+':
    case '-':
        return 3;
    case '*':
    case '/':
        return 5;
    case '^':
        return 7;
    case ')':
        return 8;
    default:
        return 0;
    }
}
int getInComingPriority(char c)//栈外运算符优先级
{
    switch(c)
    {
    case '#':
        return 0;
    case '(':
        return 8;
    case '+':
    case '-':
        return 2;
    case '*':
    case '/':
        return 4;
    case '^':
        return 6;
    case ')':
        return 1;
    default:
        return 0;
    }
}
int comparePriority(char in,char out)//栈内外运算符优先级比较
{
    if(getInStackPriority(in)<getInComingPriority(out))//栈外优先级高
    {
        return -1;
    }
    else if(getInStackPriority(in)==getInComingPriority(out))//一样高
    {
        return 0;
    }
    else
    {
        return 1;
    }
}
class management{
public:
    stack<double> operands;//存数字
    stack<char> operators;//存操作符
    void firstStep()//每次新建都调用一下，前端加一个’#‘标志
    {
        operators.push('#');
    }
    void manage(){//运算过程
        char cha=operators.top();//取栈内符号
        operators.pop();
        if(cha=='#'||cha=='('||cha==')')//无操作的符号
        {
            return;
        }
        else
        {
            double a=operands.top();
            operands.pop();
            double b=operands.top();
            operands.pop();
            switch(cha)//下面每个case都要有一个return，这个问题debug了一天
            {
            case '+':
                operands.push(a+b);
                return;
            case '-':
                operands.push(b-a);
                return;
            case '*':
                operands.push(a*b);
                return;
            case '/':
                operands.push(b/a);
                return;
            case '^':
                operands.push(pow(b,a));
                return;

            default:
                return;
            }
        }


    }
    void push(part t)//把一个个模块中的值分类入栈
    {
        int flag=0;
        if(t.type==true)//数值入栈
        {
            operands.push(t.figure);
        }
        else//操作符入栈
        {
            while(!operators.empty())//循环是为了有需要连续操作的情况，其他情况设置了跳出。
            {
                char out=t.cha;//栈外操作符
                char in=operators.top();//栈内操作符
                int i=comparePriority(in,out);//操作符比较
                if(i==-1)
                {
                    operators.push(out);
                    flag=1;
                }
                else if(i==1)
                {
                    manage();
                }
                else
                {
                    operators.pop();
                    flag=1;
                }
                if(flag==1)
                {
                    break;
                }
            };

        }
    }
    bool empty()
    {
        return operators.empty();
    }
    double getValue()
    {
        return operands.top();
    }
};
part getNextPart(char * cha)//拆分模块
{
    static char *incha=cha;//静态定义一次后永远都无法再次初始化，并且全局有效，但只能在此函数体内使用
    if(isdigit(*incha))//判断是不是数字开头
    {
        double num=strtod(incha,&incha);//如果是数字开头，就把他转化为浮点数（strtod函数），第一个参数是要操作的目标字符串，第二个是传回数字后面的内容，我们留着下次继续取符号
        return part(true,num,0);
    }
    else if(*incha)//如果不是数字开头也不是空指针
    {
        return part(false,0,*(incha++));//取符号操作
    }
    else//空指针
    {
        return part(false,0,0);//双零是结束标志
    }
}
int main()
{
    string expression;
    cin>>expression;//输入表达式
    expression=expression+'#';//加上后缀
    char *exp=new char[expression.length()+1];//开辟char空间
    strcpy(exp,expression.c_str());//运用.c_str(),把string给了char，不然是不行的
    management mana;//建立操作对象
    mana.firstStep();//初始化，加入前缀’#‘
    part p=getNextPart(exp);//获取第一个模块
    mana.push(p);//第一个模块入栈
    while(!mana.empty())//操作符栈不空就继续
    {
        p=getNextPart(exp);//取模块
        if(p.cha==0&&p.figure==0)//结束标志
        {
            break;
        }
        mana.push(p);//入栈
    }
    double res=mana.getValue();//得到结果
    if(abs(double(int(res))-res)<0.00001)//判断是不是整数
    {
        cout<<res<<endl;//整数就直接输出整数
    }
    else
    {
        cout.setf(ios::fixed);
        cout <<fixed<< setprecision(5) << res <<endl;//非整数输出五位小数
    }
    return 0;
}
